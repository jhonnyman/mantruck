swagger: "2.0"
info:
  description: "This is a sample server Truckstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "MAN Trucks"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v1"
tags:
- name: "truck"
  description: "Powering you Business on the road"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to MAN Truck orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /trucks:
    get:
      tags:
      - "truck"
      summary: "List all trucks"
      description: ""
      operationId: "listTruck"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "object"
            # additionalProperties:
            #   type: "object"
            #   format: "int32"
    post:
      tags:
      - "truck"
      summary: "Adds a new truck"
      description: ""
      operationId: "addTruck"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Truck object"
        required: true
        schema:
          $ref: "#/definitions/Truck"
      responses:
        405:
          description: "Invalid input"
    put:
      tags:
      - "truck"
      summary: "Update an existing truck"
      description: ""
      operationId: "updateTruck"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Truck object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Truck"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Truck not found"
        405:
          description: "Validation exception"
  /trucks/{truckId}:
    get:
      tags:
      - "truck"
      summary: "Find truck by ID"
      description: "Returns a single truck"
      operationId: "getTruckById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "truckId"
        in: "path"
        description: "ID of truck to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Truck"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Truck not found"
    post:
      tags:
      - "truck"
      summary: "Updates a truck in the store with form data"
      description: ""
      operationId: "updateTruckWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "truckId"
        in: "path"
        description: "ID of truck that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      # - name: "name"
      #   in: "formData"
      #   description: "Updated name of the truck"
      #   required: false
      #   type: "string"
      # - name: "status"
      #   in: "formData"
      #   description: "Updated status of the truck"
      #   required: false
      #   type: "string"
      - in: "body"
        name: "body"
        description: "Truck object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Truck"
      responses:
        405:
          description: "Invalid input"
    delete:
      tags:
      - "truck"
      summary: "Deletes a truck"
      description: ""
      operationId: "deleteTruck"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "truckId"
        in: "path"
        description: "Truck id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Truck not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Truck:
    type: "object"
    required:
    - "name"
    - "colors"
    - "engineHP"
    - "engineVolume"
    - "segment"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "TGX 18.44"
      engineHP:
        type: "string"
        example: "440 HP"
      engineVolume:
        type: "string"
        example: "10.518"
      fuel:
        type: "string"
        example: "diesel"
      segment:
        type: "string"
        description: "truck segment"
        enum:
        - "Long Haul"
        - "Construction"
        - "Firedepartment"
        - "Distribution (Food)"
        - "Wastedisposal"
      colors:
        type: "array"
        xml:
          name: "color"
          wrapped: true
        items:
          type: "string"
          example: "red"
    xml:
      name: "Truck"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"